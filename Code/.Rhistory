real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob_lpmf(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
library(rstan)
library(shinystan)
library(ggmcmc)
mcode <- '
functions{
//write the custom function
real transprob_lpmf(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
loglike=probmat[startstate,endstate];
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
vector[N] startstate;  //starting state
vector[N] endstate; //ending state
vector[N] starttime; //starting time
vector[N] endtime; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob_lpmf(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
mcode <- '
functions{
//write the custom function
real transprob_lpmf(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
//  loglike=log(probmat[startstate,endstate]);
loglike=.4;
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
vector[N] startstate;  //starting state
vector[N] endstate; //ending state
vector[N] starttime; //starting time
vector[N] endtime; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob_lpmf(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
mcode <- '
functions{
//write the custom function
real transprob_lpmf(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
//  loglike=log(probmat[startstate,endstate]);
loglike=.4;
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
vector[N] startstate;  //starting state
vector[N] endstate; //ending state
vector[N] starttime; //starting time
vector[N] endtime; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
library(rstan)
library(shinystan)
library(ggmcmc)
mcode <- '
functions{
//write the custom function
real transprob_log(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
//  loglike=log(probmat[startstate,endstate]);
loglike=.4;
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
vector[N] startstate;  //starting state
vector[N] endstate; //ending state
vector[N] starttime; //starting time
vector[N] endtime; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
library(rstan)
library(shinystan)
library(ggmcmc)
mcode <- '
functions{
//write the custom function
real transprob_log(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
//  loglike=log(probmat[startstate,endstate]);
loglike=.4;
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
int startstate[N];  //starting state
int endstate[N]; //ending state
real starttime[N]; //starting time
real endtime[N]; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
mcode <- '
functions{
//write the custom function
real transprob_log(int endstate, real starttime,real endtime, int startstate, int n_states, matrix lambda){
real dur;
real loglike;
matrix[n_states,n_states] probmat;
dur=endtime-starttime;
probmat=matrix_exp(lambda*dur);
loglike=log(probmat[startstate,endstate]);
//  loglike=.4;
return loglike;
}
}
data{
int<lower=1> n_states;  //number of states in the model
int<lower=0> N; //number of observed transitions
int startstate[N];  //starting state
int endstate[N]; //ending state
real starttime[N]; //starting time
real endtime[N]; //ending time
}
parameters{
real logmort; //log of mortality rate (from dx, psa recurrece, mets)
real beta12;  //log of dx to psa recurrence rate
real beta23;  //log of psa recurrence to mets rate
real beta34;  //log of mets to death rate
}
transformed parameters{
// I can do this for the array of matrices ultimately
// This is how you get an array of matrices
// matrix[J,K] x[I]; // x is an I-array of (JxK)-matrices
matrix[n_states,n_states] lambda;
lambda[1,1]=(-1)*(exp(beta12)+exp(logmort));
lambda[1,2]=exp(beta12);
lambda[1,3]=0;
lambda[1,4]=0;
lambda[1,5]=exp(logmort);
lambda[2,1]=0;
lambda[2,2]=(-1)*(exp(beta23)+exp(logmort));
lambda[2,3]=exp(beta23);
lambda[2,4]=0;
lambda[2,5]=exp(logmort);
lambda[3,1]=0;
lambda[3,2]=0;
lambda[3,3]=exp(beta34+exp(logmort));
lambda[3,4]=exp(beta34);
lambda[3,5]=exp(logmort);
lambda[4,1]=0;
lambda[4,2]=0;
lambda[4,3]=0;
lambda[4,4]=0;
lambda[4,5]=0;
lambda[5,1]=0;
lambda[5,2]=0;
lambda[5,3]=0;
lambda[5,4]=0;
lambda[5,5]=0;
}
model{
for(i in 1:N){
endstate[i]~transprob(starttime[i], endtime[i], startstate[i], n_states, lambda); //this is the custom function
}
}
'
datalist=list(
startstate=simdata$startstate,
endstate=simdata$endstate,
starttime=simdata$starttime,
endtime=simdata$endtime,
n_states=5,
N=dim(simdata)[2]
)
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=1,seed=1)
modfit <- stan(model_code = mcode, data = datalist,
iter = 20000, chains = 1, thin=10,seed=1)
modfit
modfit <- stan(model_code = mcode, data = datalist,
iter = 200, chains = 1, thin=10,seed=1)
